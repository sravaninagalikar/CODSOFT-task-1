import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score     
titanic_data = pd.read_csv('titanic_dataset.csv')  
titanic_data.head()  
# getting some informations about the data
titanic_data.info()
# check the number of missing values in each column
titanic_data.isnull().sum()
# drop the "Cabin" column from the dataframe
titanic_data = titanic_data.drop(columns='Cabin', axis=1)
# replacing the missing values in "Age" column with mean value
titanic_data['Age'].fillna(titanic_data['Age'].mean(), inplace=True)
# finding the mode value of "Embarked" column
print(titanic_data['Embarked'].mode())
print(titanic_data['Embarked'].mode()[0])
# replacing the missing values in "Embarked" column with mode value
titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0], inplace=True)
# check the number of missing values in each column
titanic_data.isnull().sum()
# getting some statistical measures about the data
titanic_data.describe()
# finding the number of people survived and not survived
titanic_data['Survived'].value_counts()
sns.set()  
sns.countplot(titanic_data['Survived'])
titanic_data['Sex'].value_counts()
# Analysing Gender wise survivors
sns.countplot(x='Sex', hue='Survived', data=titanic_data)
# count plot for "Pclass" column
sns.countplot(x='Pclass', data=titanic_data)
sns.countplot(x='Pclass', hue='Survived', data=titanic_data)
titanic_data['Sex'].value_counts()
titanic_data['Embarked'].value_counts()
# converting categorical Column
titanic_data.replace({'Sex':{'male':0,'female':1}, 'Embarked':{'S':0,'C':1,'Q':2}}, inplace=True)
titanic_data.head()
X = titanic_data.drop(columns = ['PassengerId','Name','Ticket','Survived'],axis=1)
Y = titanic_data['Survived']
print(Y)
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=2)    
print(X.shape, X_train.shape, X_test.shape)
model = LogisticRegression()
# training the Logistic Regression model with training data
model.fit(X_train, Y_train)
# accuracy on training data
X_train_prediction = model.predict(X_train)
print(X_train_prediction)


